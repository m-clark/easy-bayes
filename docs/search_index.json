[
["index.html", "Easy Bayes with rstanarm and brms", " Easy Bayes with rstanarm and brms Michael Clark m-clark.github.io 2018-11-10 "],
["introduction.html", "Introduction ", " Introduction "],
["overview.html", "Overview", " Overview This workshop provides an overview of the rstanarm and brms packages. Basic modeling syntax is provided, as well as diagnostic checking, model comparison, and how to get more from the models. Goals Note that it is not a goal of this workshop to teach Bayesian data analysis. However, by the end of the workshop, you should be well aware of what rstanarm and brms have to offer, and how to use them, as well as what steps you might take to get the most from your models. Prerequisites You should know how to do some standard regression modeling in R. While prior exposure to Bayesian analysis is in some sense a prerequisite, this can also be seen a stepping stone to Bayesian analysis. Once you see how easy it is to get more from standard models, and how easy it is to run more complicated models, you’ll likely want to use these tools even if you haven’t used the Bayesian approach before. Note the following color coding used in this document: emphasis package function object/class link "],
["basic-bayesian-analysis.html", "Basic Bayesian Analysis", " Basic Bayesian Analysis The classic formula: \\[p(\\mathcal{A}|\\mathcal{B}) = \\frac{p(\\mathcal{B}|\\mathcal{A})p(\\mathcal{A})}{p(\\mathcal{B})}\\] Conceptually, we can think about it in different ways. \\[posterior \\propto likelihood * prior\\] Standard methods you are already familiar with begin and end with likelihood. Alternatively, we can think also in terms of the posterior as the combination hypothesis, and evidence, in the form of data. \\[p(hypothesis|data) \\propto p(data|hypothesis)p(hypothesis)\\] \\[\\text{updated belief} = \\text{current evidence} * \\text{prior belief or evidence}\\] Some key distinctions: Distributions and uncertainty estimation instead of point estimates However, given the distribution for a parameter, we still obtain point estimates Easy model criticism http://micl.shinyapps.io/prior2post/ "],
["stan-and-the-stan-ecosystem.html", "Stan and the Stan ecosystem", " Stan and the Stan ecosystem "],
["stan.html", "Stan", " Stan Probabilistic programming language HMC/NUTS Compared to others: Fast convergence No conjugacy required warmup vs. burnin less autocorrelation faster for more complex models Why use? Fit very complex models Better approaches for model diagnostics Natural interval estimates for any statistic that comes out of a model data { // Data block int&lt;lower=1&gt; N; // Sample size int&lt;lower=1&gt; K; // Dimension of model matrix matrix[N, K] X; // Model Matrix vector[N] y; // Target variable } parameters { // Parameters block vector[K] beta; // Coefficient vector real&lt;lower=0&gt; sigma; // Error scale } model { // Model block vector[N] mu; mu = X * beta; // Creation of linear predictor // priors beta ~ normal(0, 10); sigma ~ cauchy(0, 5); // With sigma bounded at 0, this is half-cauchy // likelihood y ~ normal(mu, sigma); } "],
["rstan.html", "rstan", " rstan Allows one to use Stan within R Model can be: a character string separate file with model expressed in the Stan language RStudio support for Stan (e.g. syntax highlighting) rstan runs the model, and provides a lot of other tools to assess. results = stan(model_code = my_model, data = my_data_list) We will not cover this package "],
["rstanarm.html", "rstanarm", " rstanarm Developed by Stan team Good for basic to intermediate, and even somewhat complex models Precompiled stan code Standard models run very quickly Without compilation will always be faster than brms for identical models "],
["brms.html", "brms", " brms Developed along with Stan team (though by one person) Good for basic to complex models. Not pre-compiled Some simpler models with less data would take longer for compilation than to actually run. Extremely rapid feature integration. "],
["more-stan.html", "More Stan", " More Stan Many package to explore the results of a Stan model from any of these packages. shinystan tidybayes etc. "],
["getting-started.html", "Getting started", " Getting started rstan installation required. Installed as any other R package "],
["basic-glm.html", "Basic GLM", " Basic GLM School administrators study the attendance behavior of high school juniors at two schools Target: Number of days of absence Predictors: Type of program in which the student is enrolled: General, Vocational, Academic standardized test in math Gender "],
["traditional-glm.html", "Traditional GLM", " Traditional GLM library(tidyverse) attendance = haven::read_dta(&quot;https://stats.idre.ucla.edu/stat/stata/dae/nb_data.dta&quot;) attendance &lt;- attendance %&gt;% mutate( prog = factor(prog, levels = 1:3, labels = c(&quot;General&quot;, &quot;Academic&quot;, &quot;Vocational&quot;)), prog = fct_relevel(prog, c(&#39;Vocational&#39;, &#39;General&#39;, &#39;Academic&#39;)), gender = factor(gender, labels = c(&#39;Female&#39;, &#39;Male&#39;)), id = factor(id) ) attendance_glm &lt;- glm(daysabs ~ math + gender + prog, data = attendance, family = poisson) ## summary(attendance_glm) term estimate std.error statistic p.value (Intercept) 1.489 0.081 18.302 0 math -0.007 0.001 -7.437 0 genderMale -0.242 0.047 -5.184 0 progGeneral 1.271 0.078 16.309 0 progAcademic 0.845 0.068 12.450 0 "],
["rstanarm-glm.html", "rstanarm: GLM", " rstanarm: GLM library(rstanarm) attendance_bglm &lt;- stan_glm(daysabs ~ math + gender + prog, data = attendance, family = poisson) summary(attendance_bglm, digits = 3) stan_glm family: poisson [log] formula: daysabs ~ math + gender + prog observations: 314 predictors: 5 ------ Median MAD_SD (Intercept) 1.488 0.083 math -0.007 0.001 genderMale -0.242 0.046 progGeneral 1.269 0.079 progAcademic 0.844 0.068 Sample avg. posterior predictive distribution of y: Median MAD_SD mean_PPD 5.955 0.198 ------ For info on the priors used see help(&#39;prior_summary.stanreg&#39;). Adding more options Typical configuration would involve setting priors, as well as MCMC options such as iterations, warmup, etc. attendance_bglm &lt;- stan_glm(daysabs ~ math + gender + prog, data = attendance, family = poisson, prior = student_t(df = 7), prior_intercept = student_t(df = 7), iter = 5000, warmup = 2000, thin = 10, cores = 4, seed = 1234) "],
["rstanarm-mixed-model.html", "rstanarm: Mixed Model", " rstanarm: Mixed Model library(lme4) sleepstudy_lmer &lt;- lmer(Reaction ~ Days + (1 + Days|Subject), data = sleepstudy) summary(sleepstudy_lmer) Linear mixed model fit by REML [&#39;lmerMod&#39;] Formula: Reaction ~ Days + (1 + Days | Subject) Data: sleepstudy REML criterion at convergence: 1743.6 Scaled residuals: Min 1Q Median 3Q Max -3.9536 -0.4634 0.0231 0.4634 5.1793 Random effects: Groups Name Variance Std.Dev. Corr Subject (Intercept) 612.09 24.740 Days 35.07 5.922 0.07 Residual 654.94 25.592 Number of obs: 180, groups: Subject, 18 Fixed effects: Estimate Std. Error t value (Intercept) 251.405 6.825 36.838 Days 10.467 1.546 6.771 Correlation of Fixed Effects: (Intr) Days -0.138 sleepstudy_blmer &lt;- stan_lmer(Reaction ~ Days + (1 + Days|Subject), data = sleepstudy) summary(sleepstudy_blmer) stan_lmer family: gaussian [identity] formula: Reaction ~ Days + (1 + Days | Subject) observations: 180 ------ Median MAD_SD (Intercept) 251.616 6.503 Days 10.451 1.629 sigma 25.853 1.541 Error terms: Groups Name Std.Dev. Corr Subject (Intercept) 24.258 Days 6.901 0.08 Residual 25.959 Num. levels: Subject 18 Sample avg. posterior predictive distribution of y: Median MAD_SD mean_PPD 298.572 2.716 ------ For info on the priors used see help(&#39;prior_summary.stanreg&#39;). "],
["rstanarm-other-models.html", "rstanarm: Other Models", " rstanarm: Other Models ANOVA Beta regression Conditional logistic GLM including negative binomial models Generalized additive models Nonlinear and Generalized mixed models ‘Joint’ models for longitudinal and time-to-event (e.g. survival) Multivariate Ordinal models "],
["priors.html", "Priors ", " Priors "],
["default-priors.html", "Default priors", " Default priors Depends on the model For most models: intercepts are treated differently regression coefficients have mean zero with some specific variance scale parameters (e.g. residual variance) will have appropriate priors Basically, rstanarm is going to be okay for you to use defaults Resources about priors: ?prior_summary ?priors http://mc-stan.org/rstanarm/articles/priors.html https://github.com/stan-dev/stan/wiki/Prior-Choice-Recommendations "],
["getting-priors.html", "Getting priors", " Getting priors prior_summary(attendance_bglm) Priors for model &#39;attendance_bglm&#39; ------ Intercept (after predictors centered) ~ normal(location = 0, scale = 10) Coefficients ~ normal(location = [0,0,0,...], scale = [2.5,2.5,2.5,...]) **adjusted scale = [0.099,2.500,2.500,...] ------ See help(&#39;prior_summary.stanreg&#39;) for more details "],
["setting-priors.html", "Setting priors", " Setting priors One can set priors with the appropriate arguments to the model function Argument Used in Applies to prior_intercept All modeling functions except stan_polr and stan_nlmer Model intercept, after centering predictors. prior All modeling functions Regression coefficients. Does not include coefficients that vary by group in a multilevel model (see prior_covariance). prior_aux stan_glm*, stan_glmer*, stan_gamm4, stan_nlmer Auxiliary parameter, e.g. error SD (interpretation depends on the GLM). prior_covariance stan_glmer*, stan_gamm4, stan_nlmer Covariance matrices in multilevel models with varying slopes and intercepts. See the stan_glmer vignette for details on this prior. The stan_polr, stan_betareg, and stan_gamm4 functions also provide additional arguments specific only to those models: Argument Used only in Applies to prior_smooth stan_gamm4 Prior for hyperparameters in GAMs (lower values yield less flexible smooth functions). prior_counts stan_polr Prior counts of an ordinal outcome (when predictors at sample means). prior_z stan_betareg Coefficients in the model for phi. prior_intercept_z stan_betareg Intercept in the model for phi. prior_phi stan_betareg phi, if not modeled as function of predictors. Example attendance_bglm &lt;- stan_glm(daysabs ~ math + gender + prog, data = attendance, family = poisson, prior = student_t(df = 7)) "],
["exercise.html", "Exercise", " Exercise Whether a survey respondent agrees or disagrees with a conservative statement about the role of women in society 1974/1975 Survey Women should take care of running their homes and leave running the country up to men Modeled as a function of the gender and education of the respondents data(&quot;womensrole&quot;, package = &quot;HSAUR3&quot;) womensrole_glm &lt;- glm(cbind(agree, disagree) ~ education + gender, data = womensrole, family = binomial) ## summary(womensrole_glm) "],
["installation.html", "Installation", " Installation rstan installation required. Installed as any other R package "],
["comparison-to-rstanarm.html", "Comparison to rstanarm", " Comparison to rstanarm In general, brms offers more modeling capabilities, flexibility with priors, and more. "],
["models.html", "Models", " Models "],
["models-in-brms.html", "Models in brms", " Models in brms The modeling syntax with brms mimics base R and some of the more popular packages: base R lme4 mgcv survival "],
["brms-mixed-model.html", "brms: Mixed Model", " brms: Mixed Model sleepstudy_brms &lt;- brm(Reaction ~ Days + (1 + Days|Subject), data = sleepstudy) summary(sleepstudy_brms) Family: gaussian Links: mu = identity; sigma = identity Formula: Reaction ~ Days + (1 + Days | Subject) Data: sleepstudy (Number of observations: 180) Samples: 4 chains, each with iter = 2000; warmup = 1000; thin = 1; total post-warmup samples = 4000 Group-Level Effects: ~Subject (Number of levels: 18) Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat sd(Intercept) 26.74 7.04 15.36 43.05 1635 1.00 sd(Days) 6.52 1.50 4.20 9.95 1290 1.01 cor(Intercept,Days) 0.10 0.29 -0.46 0.67 877 1.01 Population-Level Effects: Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat Intercept 251.42 7.39 236.86 266.19 1650 1.00 Days 10.41 1.67 7.24 13.82 1233 1.00 Family Specific Parameters: Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat sigma 25.89 1.55 23.10 29.06 3200 1.00 Samples were drawn using sampling(NUTS). For each parameter, Eff.Sample is a crude measure of effective sample size, and Rhat is the potential scale reduction factor on split chains (at convergence, Rhat = 1). "],
["brms-mixed-model-extensions.html", "brms: Mixed Model Extensions", " brms: Mixed Model Extensions additional distributions: ordinal, zero-inflated, beta and many more Correlated residuals, Additive mixed models, non-linear with known form, heterogenous variance components, correlated random effects across multivariate outcomes, and more # auto regressive residual structure model &lt;- brm(Reaction ~ Days + (1 + Days|Subject), data = sleepstudy, correlation = cor_ar(~Days)) # multi-membership models model &lt;- brm(DV ~ x + (1|mm(group_1, group_2)), data = sleepstudy, correlation = cor_ar(~Days)) # smooth terms model &lt;- brm(Reaction ~ s(Days) + (1 + Days|Subject), data = sleepstudy) # use gaussian process instead model &lt;- brm(Reaction ~ gp(Days) + (1 + Days|Subject), data = sleepstudy) # multivarate outcome; q is an arbitrarily named identifier connecting random # effects. f1 = bf(DV_1 ~ x + 1|q|group) f2 = bf(DV_2 ~ x + 1|q|group) f = f1 + f2 model &lt;- brm(f, data = mydata) "],
["brms-mo-models-mo-models-mo-models.html", "brms: Mo’ models, mo’ models, mo’ models!", " brms: Mo’ models, mo’ models, mo’ models! GAM (gp) Distributional response (e.g. model the variance as well as the mean) Gaussian Processes ZIP Multivariate Missing data Measurement error # non-linear model with known form nlform &lt;- bf(cum ~ ult * (1 - exp(-(dev / theta)^omega)), ult ~ 1 + (1 | AY), omega ~ 1, theta ~ 1, nl = TRUE) # missing values bform &lt;- bf(bmi | mi() ~ age * mi(chl)) + bf(chl | mi() ~ age) + set_rescor(FALSE) fit &lt;- brm(bform, data = nhanes) "],
["model-criticism-in-rstanarm-and-brms.html", "Model Criticism in rstanarm and brms", " Model Criticism in rstanarm and brms Much of the core functionality is the same across both packages Functions that exist in both are identical We will focus on brms, which has some extras "],
["model-exploration.html", "Model Exploration ", " Model Exploration "],
["marginal-effects.html", "Marginal effects", " Marginal effects brms allows one to to plot marginal effects For standard linear models this is useful for group comparisons and interactions For nonlinear models (glm and beyond) useful for any effect marginal_effects(attendance_brms) "],
["hypothesis-tests.html", "Hypothesis tests", " Hypothesis tests hypothesis(attendance_brms, &#39;genderMale &lt; -.2&#39;) Hypothesis Tests for class b: Hypothesis Estimate Est.Error CI.Lower CI.Upper Evid.Ratio Post.Prob Star 1 (genderMale)-(-.2) &lt; 0 -0.05 0.04 -Inf 0.03 5.9 0.86 --- &#39;*&#39;: The expected value under the hypothesis lies outside the 95%-CI. Posterior probabilities of point hypotheses assume equal prior probabilities. hypothesis(attendance_brms, &#39;progGeneral/progAcademic &gt; 1&#39;) Hypothesis Tests for class b: Hypothesis Estimate Est.Error CI.Lower CI.Upper Evid.Ratio Post.Prob Star 1 (progGeneral/prog... &gt; 0 0.51 0.09 0.37 Inf Inf 1 * --- &#39;*&#39;: The expected value under the hypothesis lies outside the 95%-CI. Posterior probabilities of point hypotheses assume equal prior probabilities. "],
["extracting-results.html", "Extracting results", " Extracting results "],
["model-diagnostics.html", "Model Diagnostics", " Model Diagnostics Numerous model diagnostics are available to the Bayesian analyst The Stan ecosystem makes exploring these not only easy, but fun! "],
["shiny-stan.html", "Shiny stan", " Shiny stan shinystan allows for interactive exploration of model diagnostics Just use launch_shinystan on any model object from rstan, rstanarm, or brms launch_shinystan(attendance_brms) "],
["pp-check.html", "pp check", " pp check pp_check(attendance_brms) The Poisson’s underlying assumption of the mean equaling the variance rarely holds with typical data. One way to handle overdispersion in count models is to move to something like negative binomial or other approaches. Interestingly, we can have a random effect per observation for Poisson models (even in the non-Bayesian context). In this case, our pp_check suggests a much better result. test = update(attendance_brms, . ~ . + (1|id), newdata=attendance) pp_check(test) "],
["loo-plot.html", "loo plot", " loo plot "],
["model-performance.html", "Model Performance ", " Model Performance "],
["model-comparison.html", "model comparison", " model comparison "],
["model-average.html", "model average", " model average "],
["prediction.html", "prediction", " prediction "],
["references.html", "References", " References "]
]
